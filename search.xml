<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[面向对象编程中的概念]]></title>
    <url>%2F2017%2F03%2F02%2F%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[面向对象:可以创建自定义的类型,很好的支持继承和多态 面向对象的语言: c++/java/c# 特征:封装,继承,多态 首先看到的是数据,即被执行操作的对象 对象: 对象实质上是指事物在程序中的表现形式 在oop语义中,对象特征都叫做属性,动作被称为方法 类: 类实际上就是对象的设计蓝图或配方 类更多的是一种模板,而对象则是在这些模板上生成的实例 类用来描述一系列相似的对象 在其他语言中用类(class)来创建对象es5中还没有类,es6已经有类的概念了 封装:封装的概念通常由两部分组成: 相关的数据(用于存储属性) 基于这些数据所能做的事情(所能调用的方法) 信息的隐藏 将功能的具体实现封装在对象内部,只对外暴露接口,外部在使用时,只需要考虑接口怎么使用,不需要考虑内部功能的实现 聚合: 聚合有时候也叫组合,指的是将几个现有对象合并成一个新对象的过程 通过聚合可以讲一个问题分解成多个问题 继承: 通过继承,可以实现对现有代码的重用 当对象继承另一个对象时,通常会加入新的方法,扩展被继承的老对象 重定义继承方法的过程叫做重写 在传统的oop环境中,继承通常指的是类与类之间的关系,在javascript中不存在类,继承只能发生在对象之间接口继承只继承方法签名,实现继承则继承实际的方法ECMAScript只支持实现继承,主要是依靠原型链来实现的 多态: 不同对象通过相同的方法来实现各自行为的能力,叫做多态 js中没有多态,因为js不需要多态在强类型语言中都有多态,首先要有继承关系,父类的变量指向子类的对象,就是多态 123456789101112131415161718192021222324252627282930313233class Animal&#123; &#125; class Dog:extend Animal&#123; public void bark()&#123; console.log("汪汪汪"); &#125; &#125; class Cat:extend Animal&#123; public void bark()&#123; console.log("喵喵喵"); &#125; &#125; class Pig:extend Animal&#123; public void bark()&#123; console.log("哼哼哼"); &#125; &#125; Animal d = new Dog(); d.bark(); Animal c = new Cat(); c.bark(); Animal p = new Pig(); p.bark(); function bark(Aniaml d)&#123; d.bark(); &#125;]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript概念]]></title>
    <url>%2F2017%2F02%2F16%2F%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[变量的作用用来存储可变化的数据,属于javascript中的基本类型 语法及规范变量的声明var 变量名 变量的赋值变量名 = 要赋值的数据; 等号右边先计算,从左向右计算 变量取名规范 变量名取值范围:0-9,a-z,A-Z,_,$,并且数字不能作为变量名的开头 变量名区分大小写,不能使用关键字和保留字,变量名最长不能超过255个字符 两个变量相加 两个都是number类型,作用是相加 两个都是string类型,作用是连接 一个number,一个string,连接 变量作用域 在脚本片段中的变量,是全局变量 在函数中的变量,是局部变量 在函数中没有用var声明的变量,也是全局变量]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javacript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据类型]]></title>
    <url>%2F2017%2F02%2F15%2F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[基本数据类型 直接存储 存储在栈中,一次寻址 string:字符串 字符串都是用&quot;&quot;或&#39;&#39;引起来的,可以当做直接量 字符串是不可变的,一旦创建,值就不能改变,如果要改变字符串的值,首先要销毁原来的字符串,再用一个包含新值的字符串填充该变量,在垃圾回收之前会占用内存 number:数字最基本的数值字面量是十进制的整数,除了是禁止以外还有八进制和十六进制的字面值八进制字面值第一位必须是0,如果字面值中的数值超过了范围,前导0会被忽略,后面的数值会被当做十进制数值解析 八进制字面量在严格模式下会报错 数字加了引号后就是string类型 有一种特殊的数字:NaN(not a number) NaN表示非数值,即计算返回的不是一个数值,不会影响代码的执行isNaN方法可以判断是否是NaN1NaN == NaN; // false boolean:布尔类型 只有true和false两个字面值 区分大小写 空格字符串,0,NaN,null,undefined都是false undefined:未定义 与 null: 空undefined: 一个变量申明但没有返回值 数组中没有的值 没有接收到实参的形参,值是undefined return默认返回undefined null: null类型只有一个值:null由于设计时的bug,null类型属于object12console.log(typeof null); // objectnull == undefined; // true 包装数据类型 存储引用数据 把数据存储在堆中,把堆中的内存地址存储在栈中,二次寻址 包装数据类型在做比较的时候比较的是地址值 在javascript中除了基本数据类型,其他都属于对象 对于包装数据类型单独整理]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javacript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript概念]]></title>
    <url>%2F2017%2F02%2F14%2Fjavscript%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[javascript分为三部分:ECMAScript:javascript语言的核心部分,独立于浏览器 之外,可以在其他环境中使用 DOM:Document Object Model文档对象模型,提供了一种与HTML,XML文档交互的方式 1234function test(a,b) &#123; var a = 0; console.log(b);&#125; BOM:Browser Object Model浏览器对象模型,提供了一个与浏览器环境有关的对象集合 js简介:javascript是弱类型语言,基于对象和事件驱动的脚本语言,应用在客户端(Node已经可以应用在服务器端)js只需解释就可以执行,java需要先编译成字节码文件再执行 特点: 交互性 安全性(不能访问本地硬盘) 跨平台性 编译型语言:一次性把代码转换成cpu能看懂的语言,一行一行执行解释(速度快) 解释型语言:一行一行解析,解析一行执行一行 script标签属性: async异步,多人同时做多件事情,立即异步下载js,不影响页面其他操作,但js下载完毕后立即执行 sync同步,一个人有序做多件事情 defer异步,脚本延迟到文档完全被解析和显示后再执行,只有外部脚本可以用]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javacript</tag>
      </tags>
  </entry>
</search>